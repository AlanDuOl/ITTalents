// <auto-generated />
using System;
using EasyTalents.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EasyTalents.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201022170358_Create_Database")]
    partial class Create_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasyTalents.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EasyTalents.Models.DailyWorkingHours", b =>
                {
                    b.Property<int>("DailyWorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("DailyWorkingHoursId");

                    b.ToTable("DailyWorkingHours");

                    b.HasData(
                        new
                        {
                            DailyWorkingHoursId = 1,
                            Description = "Up to 4"
                        },
                        new
                        {
                            DailyWorkingHoursId = 2,
                            Description = "4 to 6"
                        },
                        new
                        {
                            DailyWorkingHoursId = 3,
                            Description = "6 to 8"
                        },
                        new
                        {
                            DailyWorkingHoursId = 4,
                            Description = "Over 8"
                        },
                        new
                        {
                            DailyWorkingHoursId = 5,
                            Description = "Weekends"
                        });
                });

            modelBuilder.Entity("EasyTalents.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EasyTalents.Models.ProfessionalInformation", b =>
                {
                    b.Property<int>("ProfessionalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("ProfessionalInformationId");

                    b.ToTable("ProfessionalInformation");

                    b.HasData(
                        new
                        {
                            ProfessionalInformationId = 1,
                            Description = "Skype",
                            Required = true
                        },
                        new
                        {
                            ProfessionalInformationId = 2,
                            Description = "Linkedin",
                            Required = false
                        },
                        new
                        {
                            ProfessionalInformationId = 3,
                            Description = "Portfolio",
                            Required = false
                        },
                        new
                        {
                            ProfessionalInformationId = 4,
                            Description = "LinkCrud",
                            Required = false
                        },
                        new
                        {
                            ProfessionalInformationId = 5,
                            Description = "OtherTechnology",
                            Required = false
                        });
                });

            modelBuilder.Entity("EasyTalents.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            TechnologyId = 1,
                            Description = "React JS",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 2,
                            Description = "React Native",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 3,
                            Description = "Android",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 4,
                            Description = "Flutter",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 5,
                            Description = "SWIFT",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 6,
                            Description = "IOS",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 7,
                            Description = "HTML",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 8,
                            Description = "CSS",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 9,
                            Description = "Bootstrap",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 10,
                            Description = "Jquery",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 11,
                            Description = "Angular Js1",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 12,
                            Description = "Angular",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 13,
                            Description = "Java",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 14,
                            Description = "Python",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 15,
                            Description = "Flask",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 16,
                            Description = "Asp.Net MVC",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 17,
                            Description = "Asp.Net Web Form",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 18,
                            Description = "C",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 19,
                            Description = "C#",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 20,
                            Description = "NodeJs",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 21,
                            Description = "Express-NodeJs",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 22,
                            Description = "Cake",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 23,
                            Description = "Django",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 24,
                            Description = "Majento",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 25,
                            Description = "PHP",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 26,
                            Description = "Vue",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 27,
                            Description = "Wordpress",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 28,
                            Description = "Ruby",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 29,
                            Description = "MySql Server",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 30,
                            Description = "MySql",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 31,
                            Description = "Salesforce",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 32,
                            Description = "Photoshop",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 33,
                            Description = "Illustrator",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 34,
                            Description = "SEO",
                            Required = true
                        },
                        new
                        {
                            TechnologyId = 35,
                            Description = "Laravel",
                            Required = true
                        });
                });

            modelBuilder.Entity("EasyTalents.Models.UserDailyWorkingHours", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DailyWorkingHoursId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId", "DailyWorkingHoursId");

                    b.HasIndex("DailyWorkingHoursId");

                    b.ToTable("UserDailyWorkingHours");
                });

            modelBuilder.Entity("EasyTalents.Models.UserProfessionalInformation", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserProfileId", "ProfessionalInformationId");

                    b.HasIndex("ProfessionalInformationId");

                    b.ToTable("UserProfessionalInformation");
                });

            modelBuilder.Entity("EasyTalents.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HourlySalary")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserProfileId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("EasyTalents.Models.UserTechnologies", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.HasKey("UserProfileId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("UserTechnologies");
                });

            modelBuilder.Entity("EasyTalents.Models.UserWorkingShift", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingShiftId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId", "WorkingShiftId");

                    b.HasIndex("WorkingShiftId");

                    b.ToTable("UserWorkingShifts");
                });

            modelBuilder.Entity("EasyTalents.Models.WorkingShift", b =>
                {
                    b.Property<int>("WorkingShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("WorkingShiftId");

                    b.ToTable("WorkingShifts");

                    b.HasData(
                        new
                        {
                            WorkingShiftId = 1,
                            Description = "Morning"
                        },
                        new
                        {
                            WorkingShiftId = 2,
                            Description = "Afternoon"
                        },
                        new
                        {
                            WorkingShiftId = 3,
                            Description = "Night"
                        },
                        new
                        {
                            WorkingShiftId = 4,
                            Description = "Dawn"
                        },
                        new
                        {
                            WorkingShiftId = 5,
                            Description = "Business"
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "af52880d-7e06-4fa4-b415-7f26312c825f",
                            ConcurrencyStamp = "563d50b6-4b82-437e-bb1d-60d12cf22ca0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2658c94d-ae30-48d6-b77a-edf3af667805",
                            ConcurrencyStamp = "bd5104fc-409c-4016-8c84-5b8374a1bb87",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EasyTalents.Models.UserDailyWorkingHours", b =>
                {
                    b.HasOne("EasyTalents.Models.DailyWorkingHours", "DailyWorkingHours")
                        .WithMany("UserDailyWorkingHours")
                        .HasForeignKey("DailyWorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.UserProfile", "UserProfile")
                        .WithMany("UserDailyWorkingHours")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Models.UserProfessionalInformation", b =>
                {
                    b.HasOne("EasyTalents.Models.ProfessionalInformation", "ProfessionalInformation")
                        .WithMany("UserProfessionalInformation")
                        .HasForeignKey("ProfessionalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.UserProfile", "UserProfile")
                        .WithMany("UserProfessionalInformation")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Models.UserProfile", b =>
                {
                    b.HasOne("EasyTalents.Models.ApplicationUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.Location", "Location")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Models.UserTechnologies", b =>
                {
                    b.HasOne("EasyTalents.Models.Technology", "Technology")
                        .WithMany("UserTechnologies")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.UserProfile", "UserProfile")
                        .WithMany("UserTechnologies")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyTalents.Models.UserWorkingShift", b =>
                {
                    b.HasOne("EasyTalents.Models.UserProfile", "UserProfile")
                        .WithMany("UserWorkingShifts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.WorkingShift", "WorkingShift")
                        .WithMany("UserWorkingShifts")
                        .HasForeignKey("WorkingShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EasyTalents.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EasyTalents.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTalents.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EasyTalents.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
